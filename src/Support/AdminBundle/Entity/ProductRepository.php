<?php

namespace Support\AdminBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
//use Symfony\Component\HttpFoundation\Response;
/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository 
{
    public function findOneByProduct($id){
        $query = $this->createQueryBuilder('p')
                ->where('p.id = :id')
              //  ->andWhere('p.isEnable = 1')
                ->setParameter('id', $id)                
                ->getQuery();
        try{
            $product = $query->getSingleResult();

        }  catch (\NoResultException $e){
            throw new UsernameNotFoundException(
                    sprintf('Unable to find an active admin SupportFrontBundle:Product object identified by "%s".', $id),
                    null, 0, $e);
        }
                
        return $product;        
    }

    public function loadProduct($start, $order, $asc){
        $qb = $this->createQueryBuilder("p")
                ->orderBy("p.".$order, $asc)
                ->setFirstResult($start)
                ->getQuery();
        
        try{
            $products = $qb->getResult();    
        }catch (\NoResultException $e){
            throw new $this->createNotFoundException(
                '\''.$e.'\'에 관한 검색결과가 없습니다.'
            );
        }
         return $products;
    }
    
/*    public function findForProducts($start, $limit, $search ,$order, $asc){
        $qb = $this->createQueryBuilder("p");
        $query = $qb
                ->where("p.".$order."= :search")
                ->setParameter('search',$search)
                ->orderBy("p.".$order, $asc)
                ->setFirstResult($start)
                ->setMaxResults($limit)
                ->getQuery();
        
        try{
            $products = $query->getResult();            
        }catch (\NoResultException $e){
            throw new $this->createNotFoundException(
                '\''.$e.'\'에 관한 검색결과가 없습니다.'
            );
        }
        $ids = array();
        foreach($products as $product){
            $ids[] = $product->getId();
        }
         return $products;
    } */

     public function maxPage($start, $max, $products){
        
        $maxpage = floor((count($products) + $start - 1) / $max);
         
        return ($maxpage > 0) ? $maxpage : 0; 
    }
    
    public function maxLoadPage($max){
        $products = $this->findAll();        
        return floor(count($products) / $max);
    }    
    
    public function  findForProducts($start, $data, $order, $asc)
    {
        $qb = $this->createQueryBuilder("p");
        
        //키워드와 보상 유형 부분은 like를 이용해야 한다.
        $keyword = $data["keyword"];
        unset($data["keyword"]);
        
        if($keyword != null)
        {
            $qb->where($qb->expr()->like('p.eventName', ':keyword'))
                ->orWhere($qb->expr()->like('p.sponsor', ':keyword'))
                ->orWhere($qb->expr()->like('p.detail', ':keyword'))
                ->orWhere($qb->expr()->like('p.mainTarget', ':keyword')) 
                ->setParameter('keyword', '%'.$keyword.'%');
        }
        
/*        $rewardType = $data["rewardType"];
        unset($data["rewardType"]);

        if($rewardType != null)
        {
            $qb->andwhere($qb->expr()->like('p.rewardType', ':rewardType'))
                    ->setParameter('rewardType', '%'.$rewardType.'%');
        }
        */
        
        
        foreach ($data as $col=>$val)
        {   
            if(is_array($val))//min, max 구조일 경우
            {
                if($val[0] != null)
                {
                    $qb->andWhere($qb->expr()->gte('p.'.$col.'Min', ':'.$col.'_min'))
                            ->setParameter($col.'_min', $val[0]);
                }
                if($val[1] != null)
                {
                    $qb->andWhere($qb->expr()->lte('p.'.$col.'Max', ':'.$col.'_max'))
                            ->setParameter($col.'_max', $val[1]);
                }
            }
            else if(is_integer($val) && $val != 0)
            {
                    $qb->andWhere("p.".$col."= :search_".$col)
                        ->setParameter('search_'.$col, $val);
            }  
        }
        
        $query = $qb                
                ->orderBy("p.".$order, $asc)
                ->setFirstResult($start)
                ->getQuery();
        try{
            $products = $query->getResult();     
        }catch (\NoResultException $e){
            throw new $this->createNotFoundException(
                '주어진 조건에 관한 검색결과가 없습니다.'
            );
        }
         return $products;
    }
   
    
    public function  findCustomProducts($start, $data, $order, $asc)
    {
        $qb = $this->createQueryBuilder("p");
       
        $age = $data["age"];
        $businesses = $data["businesses"];
        $areas = $data["areas"];
        
        
        if($age != null)
        {
            $qb->orWhere($qb->expr()->andX(
                    $qb->expr()->lte('p.ageMin', ':ageMax'),
                    $qb->expr()->gte('p.ageMax', ':ageMin')))
                ->setParameter('ageMax', $age * 10 + 9)
                ->setParameter('ageMin', $age * 10);
        }
        
        if($businesses != null){
            foreach($businesses as $col=>$business){
                $qb->orWhere($qb->expr()->like('p.businessType', ':businessType'.$col ))
                   ->setParameter('businessType'.$col, $business);
            }
        }
        
        if($areas != null){
            foreach($areas as $col=>$area){
                $state = (string)(((int)((int)$area/100))*100);
                $qb->orWhere($qb->expr()->like('p.area', $qb->expr()->literal($area.',%')))
                   ->orWhere($qb->expr()->like('p.area', $qb->expr()->literal('%, '.$area.',%')))
                   ->orWhere($qb->expr()->like('p.area', $qb->expr()->literal('%, '.$area)))
                   ->orWhere($qb->expr()->like('p.area', $qb->expr()->literal($area)))
                   ->orWhere($qb->expr()->like('p.area', $qb->expr()->literal($state.',%')))
                   ->orWhere($qb->expr()->like('p.area', $qb->expr()->literal('%, '.$state.',%')))
                   ->orWhere($qb->expr()->like('p.area', $qb->expr()->literal('%, '.$state)))
                   ->orWhere($qb->expr()->like('p.area', $qb->expr()->literal($state)));
            }
        }        
        
        $query = $qb                
            ->orderBy("p.".$order, $asc)
            ->setFirstResult($start)
            ->getQuery();
        
        try{
            $products = $query->getResult();     
        }catch (\NoResultException $e){
            throw new $this->createNotFoundException(
                '주어진 조건에 관한 검색결과가 없습니다.'
            );
        }
        
         return $products;
    }
    
/*    public function findForDuedate($start, $limit){
        $qb = $this->createQueryBuilder("p");
        
        $query = $qb->where($qb->expr()->gte('p.recCloseTime', ':startDate'))
                ->andwhere($qb->expr()->lte('p.recCloseTime', ':endDate'))
                ->setParameter('startDate', time() - 60*60*24*7)
                ->setParameter('endDate', time())
                ->orderBy('p.recCloseTime', 'ASC')
                ->setFirstResult($start)
                ->setMaxResults($limit)
                ->getQuery();
        
        try{
            $products = $query->getResult();    
        }catch (\NoResultException $e){
            throw new $this->createNotFoundException(
                '\''.$e.'\'에 관한 검색결과가 없습니다.'
            );
        }
       return $products;
    }
*/
/*    public function findForKeyword($start, $limit, $keyword, $order, $asc) {        
        $qb = $this->createQueryBuilder("p");
        $query = $qb->where($qb->expr()->like('p.eventName', ':keyword'))
            ->orWhere($qb->expr()->like('p.sponsor', ':keyword'))
            ->orWhere($qb->expr()->like('p.detail', ':keyword'))
            ->orWhere($qb->expr()->like('p.mainTarget', ':keyword')) 
            ->setParameter('keyword', '%'.$keyword.'%')
            ->orderBy("p.".$order, $asc)
            ->setFirstResult($start)
            ->setMaxResults($limit)
            ->getQuery();
        try{
            $products = $query->getResult();    
        }catch (\NoResultException $e){
            throw new $this->createNotFoundException(
                '\''.$e.'\'에 관한 검색결과가 없습니다.'
            );
        }        
       return $products;
    }
    */

    
}
